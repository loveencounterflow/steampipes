{
  "version": 3,
  "file": "standard-transforms.js",
  "sourceRoot": "..",
  "sources": [
    "src/standard-transforms.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'STEAMPIPES/STANDARD-TRANSFORMS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n{ jr }                    = CND\nassign                    = Object.assign\n#...........................................................................................................\n{ isa\n  validate\n  type_of }               = require './types'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@$map   = ( method ) -> ( d, send ) => send method d\n@$drain = ( on_end = null ) -> { [@marks.isa_sink], on_end, }\n@$pass  = -> ( d, send ) => send d\n\n#-----------------------------------------------------------------------------------------------------------\n@$show = ( settings ) ->\n  title = ( settings?.title ? '-->' ) + ' '\n  return @$ ( d, send ) =>\n    info title + jr d\n    send d\n\n#-----------------------------------------------------------------------------------------------------------\n@$watch = ( settings, method ) ->\n  switch arity = arguments.length\n    when 1\n      method = settings\n      return @$ ( d, send ) => method d; send d\n    #.......................................................................................................\n    when 2\n      return @$watch method unless settings?\n      ### If any `surround` feature is called for, wrap all surround values so that we can safely\n      distinguish between them and ordinary stream values; this is necessary to prevent them from leaking\n      into the regular stream outside the `$watch` transform: ###\n      take_second     = Symbol 'take-second'\n      settings        = assign {}, settings\n      settings[ key ] = [ take_second, value, ] for key, value of settings\n      #.....................................................................................................\n      return @$ settings, ( d, send ) =>\n        if ( CND.isa_list d ) and ( d[ 0 ] is take_second )\n          method d[ 1 ]\n        else\n          method d\n          send d\n        return null\n  #.........................................................................................................\n  throw new Error \"Âµ18244 expected one or two arguments, got #{arity}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@$as_text = ( settings ) -> ( d, send ) =>\n  serialize = settings?[ 'serialize' ] ? JSON.stringify\n  return @$map ( data ) => serialize data\n\n#-----------------------------------------------------------------------------------------------------------\n@$collect = ( settings ) ->\n  collector = settings?.collector ? []\n  last      = Symbol 'last'\n  return @$ { last, }, ( d, send ) =>\n    if d is last then return send collector\n    collector.push d\n    return null\n\n"
  ]
}