// Generated by CoffeeScript 2.4.1
(function() {
  //###########################################################################################################
  var $, $async, $drain, $show, $watch, CND, FS, OS, PATH, SP, alert, badge, debug, echo, help, info, log, rpr, test, urge, warn, whisper,
    modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'STEAMPIPES/TESTS/WYE2';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  PATH = require('path');

  FS = require('fs');

  OS = require('os');

  test = require('guy-test');

  //...........................................................................................................
  SP = require('../..');

  ({$, $async, $drain, $watch, $show} = SP.export());

  //-----------------------------------------------------------------------------------------------------------
  this["tentative implementation"] = async function(T, done) {
    var error, matcher, probe;
    [probe, matcher, error] = ["abcde", "(a)A(b)B(c)C(d)D(e)E", null];
    await T.perform(probe, matcher, error, function() {
      return new Promise(function(resolve, reject) {
        var pipeline, t1, wye;
        pipeline = [];
        t1 = $(function(d, send) {
          send(d);
          return wye.send(`(${d})`);
        });
        wye = SP.$pass();
        pipeline.push(probe);
        pipeline.push(t1);
        pipeline.push($(function(d, send) {
          return send(d.toUpperCase());
        }));
        pipeline.push(wye);
        pipeline.push($drain(function(Σ) {
          return resolve(Σ.join(''));
        }));
        SP.pull(...pipeline);
        return null;
      });
    });
    //.........................................................................................................
    done();
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this["leapfrogging compared to wye"] = async function(T, done) {
    var error, matcher, probe, results;
    [probe, matcher, error] = ["abcde", "aBCdE", null];
    results = [];
    //.........................................................................................................
    await T.perform(probe, matcher, error, function() {
      return new Promise(function(resolve, reject) {
        var pipeline, wye;
        pipeline = [];
        pipeline.push(probe);
        pipeline.push($(function(d, send) {
          if ((d.match(/a|d/)) != null) {
            return wye.send(d);
          } else {
            return send(d);
          }
        }));
        pipeline.push($(function(d, send) {
          return send(d.toUpperCase());
        }));
        pipeline.push(wye = SP.$pass());
        pipeline.push($drain(function(Σ) {
          var R;
          results.push(R = Σ.join(''));
          return resolve(R);
        }));
        SP.pull(...pipeline);
        return null;
      });
    });
    //.........................................................................................................
    await T.perform(probe, matcher, error, function() {
      return new Promise(function(resolve, reject) {
        var leapfrog, pipeline, wye;
        leapfrog = function(d) {
          return (d.match(/a|d/)) != null;
        };
        pipeline = [];
        pipeline.push(probe);
        pipeline.push($({leapfrog}, function(d, send) {
          return send(d.toUpperCase());
        }));
        pipeline.push(wye = SP.$pass());
        pipeline.push($drain(function(Σ) {
          var R;
          results.push(R = Σ.join(''));
          return resolve(R);
        }));
        SP.pull(...pipeline);
        return null;
      });
    });
    //.........................................................................................................
    await T.perform(probe, matcher, error, function() {
      return new Promise(function(resolve, reject) {
        var pipeline, wye;
        pipeline = [];
        pipeline.push(probe);
        // pipeline.push $show()
        pipeline.push(SP.leapfrog((function(d) {
          return (d.match(/a|d/)) != null;
        }), $(function(d, send) {
          return send(d.toUpperCase());
        })));
        pipeline.push(wye = SP.$pass());
        pipeline.push($drain(function(Σ) {
          var R;
          results.push(R = Σ.join(''));
          return resolve(R);
        }));
        SP.pull(...pipeline);
        return null;
      });
    });
    //.........................................................................................................
    T.eq(results.length, 3);
    T.eq(...results);
    done();
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this["wye 2"] = async function(T, done) {
    var error, matcher, probe;
    [probe, matcher, error] = ["a", "[a](a)A", null];
    // [ probe, matcher, error, ] = ['abcde','A(a)B(b)C(c)D(d)E(e)',null]
    await T.perform(probe, matcher, error, function() {
      return new Promise(function(resolve, reject) {
        var pipeline, t1, wye;
        t1 = $(function(d, send) {
          wye.send(`[${d}]`);
          wye.send(`(${d})`);
          return send(d);
        });
        pipeline = [];
        pipeline.push(probe);
        pipeline.push(t1);
        pipeline.push($(function(d, send) {
          return send(d.toUpperCase());
        }));
        pipeline.push(wye = SP.$pass());
        pipeline.push($drain(function(Σ) {
          return resolve(Σ.join(''));
        }));
        SP.pull(...pipeline);
        return null;
      });
    });
    //.........................................................................................................
    done();
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this["wye 3"] = async function(T, done) {
    var error, matcher, probe;
    [probe, matcher, error] = [[24], [12, 6, 3, 10, 5, 16, 8, 4, 2, 1], null];
    // [ probe, matcher, error, ] = ['abcde','A(a)B(b)C(c)D(d)E(e)',null]
    await T.perform(probe, matcher, error, function() {
      return new Promise(function(resolve, reject) {
        var d, i, len, pipeline, source;
        source = SP.new_push_source();
        pipeline = [];
        pipeline.push(source);
        // pipeline.push wye = SP.$pass()
        // pipeline.push $show()
        pipeline.push($(function(d, send) {
          return send((modulo(d, 2) === 0) ? d / 2 : d * 3 + 1);
        }));
        pipeline.push($show());
        pipeline.push($(function(d, send) {
          send(d);
          if (d === 1) {
            return source.end();
          } else {
            return source.send(d);
          }
        }));
        pipeline.push($drain(function(Σ) {
          return resolve(Σ);
        }));
        SP.pull(...pipeline);
        for (i = 0, len = probe.length; i < len; i++) {
          d = probe[i];
          source.send(d);
        }
        return null;
      });
    });
    //.........................................................................................................
    done();
    return null;
  };

  //###########################################################################################################
  if (module.parent == null) {
    test(this, {
      'timeout': 30000
    });
  }

  // test @[ "leapfrogging compared to wye" ]
// test @[ "wye 3" ]

}).call(this);

//# sourceMappingURL=wye2.test.js.map
