{
  "version": 3,
  "file": "njs-streams-and-files.js",
  "sourceRoot": "../..",
  "sources": [
    "src/tests/njs-streams-and-files.coffee"
  ],
  "names": [],
  "mappings": ";AAEA;EAAA;AAAA,MAAA,GAAA,EAAA,EAAA,EAAA,KAAA,EAAA,KAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,KAAA,GAA4B;;EAC5B,EAAA,GAA4B,OAAA,CAAQ,IAAR,EAN5B;;;;;EAUA,KAAA,GAA4B,aAV5B;;;;;EAiBA,IAAC,CAAA,cAAD,GAAkB,QAAA,CAAE,IAAF,EAAQ,OAAR,CAAA,EAAA;;AAEhB,QAAA,KAAA,EAAA;AAAA,YAAO,CAAE,KAAA,GAAQ,SAAS,CAAC,MAApB,CAAP;AAAA,WACO,CADP;QACc;AAAP;AADP,WAEO,CAFP;QAGI,IAAG,GAAG,CAAC,YAAJ,CAAiB,OAAjB,CAAH;UACE,CAAE,IAAF,EAAQ,OAAR,EAAiB,MAAjB,CAAA,GAA6B,CAAE,IAAF,EAAQ,IAAR,EAAc,OAAd,EAD/B;;AADG;AAFP;QAKO,MAAM,IAAI,KAAJ,CAAU,CAAA,qCAAA,CAAA,CAAwC,KAAxC,CAAA,CAAV;AALb,KAAA;;AAOA,WAAO,IAAC,CAAA,uBAAD,CAA2B,EAAE,CAAC,gBAAH,CAAoB,IAApB,EAA0B,OAA1B,CAA3B;EATS,EAjBlB;;;;;;;;;;;;;;;;;;;;;EA+CA,IAAC,CAAA,aAAD,GAAiB,QAAA,CAAE,IAAF,EAAQ,OAAR,EAAiB,MAAjB,CAAA,EAAA;;;;AAIf,QAAA,CAAA,EAAA,KAAA,EAAA;AAAA,YAAO,CAAE,KAAA,GAAQ,SAAS,CAAC,MAApB,CAAP;AAAA,WACO,CADP;QACc;AAAP;AADP,WAEO,CAFP;QAGI,IAAG,GAAG,CAAC,YAAJ,CAAiB,OAAjB,CAAH;UACE,CAAE,IAAF,EAAQ,OAAR,EAAiB,MAAjB,CAAA,GAA6B,CAAE,IAAF,EAAQ,IAAR,EAAc,OAAd,EAD/B;;AADG;AAFP,WAKO,CALP;AAKO;AALP;QAMO,MAAM,IAAI,KAAJ,CAAU,CAAA,qCAAA,CAAA,CAAwC,KAAxC,CAAA,CAAV;AANb,KAAA;;IAQA,CAAA,GAAc,IAAC,CAAA,sBAAD,CAA0B,EAAE,CAAC,iBAAH,CAAqB,IAArB,EAA2B,OAA3B,CAA1B,EAAgE,MAAhE;IACd,WAAA,GAAc;MAAE,IAAA,EAAM,eAAR;MAAyB,IAAzB;MAA+B,OAA/B;MAAwC;IAAxC;AACd,WAAO,IAAC,CAAA,YAAD,CAAc,CAAd,EAAiB,WAAjB;EAdQ,EA/CjB;;;EAgEA,IAAC,CAAA,uBAAD,GAA2B,QAAA,CAAE,MAAF,CAAA;AACzB,QAAA;AAAA,YAAO,CAAE,KAAA,GAAQ,SAAS,CAAC,MAApB,CAAP;AAAA,WACO,CADP;QACc;AAAP;AADP;QAEO,MAAM,IAAI,KAAJ,CAAU,CAAA,+BAAA,CAAA,CAAkC,KAAlC,CAAA,CAAV;AAFb,KAAA;;AAIA,WAAO,cAAc,CAAC,MAAf,CAAsB,MAAtB,EAA8B,QAAA,CAAE,KAAF,CAAA;aAAa,MAAA,CAAO,KAAP;IAAb,CAA9B;EALkB,EAhE3B;;;EAwEA,IAAC,CAAA,sBAAD,GAA0B,QAAA,CAAE,MAAF,EAAU,MAAV,CAAA,EAAA;;;AAGxB,QAAA,CAAA,EAAA,KAAA,EAAA,WAAA,EAAA,MAAA,EAAA,YAAA,EAAA;AAAA,YAAO,CAAE,KAAA,GAAQ,SAAS,CAAC,MAApB,CAAP;AAAA,WACO,CADP;AAAA,WACU,CADV;QACiB;AAAP;AADV;QAEO,MAAM,IAAI,KAAJ,CAAU,CAAA,qCAAA,CAAA,CAAwC,KAAxC,CAAA,CAAV;AAFb,KAAA;;IAIA,IAAG,gBAAA,IAAY,CAAE,CAAE,IAAA,GAAO,GAAG,CAAC,OAAJ,CAAY,MAAZ,CAAT,CAAA,KAAmC,UAArC,CAAf;MACE,MAAM,IAAI,KAAJ,CAAU,CAAA,iCAAA,CAAA,CAAoC,IAApC,CAAA,CAAV,EADR;KAJA;;IAOA,YAAA,GAAe,MAPf;;IASA,MAAA,GAAS,QAAA,CAAE,KAAF,CAAA,EAAA;;MAEP,IAAG,aAAH;QACE,YAAA,GAAe;QACf,IAAe,aAAf;UAAA,MAAM,MAAN;SAFF;OAAA;;MAIA,IAAG,CAAI,YAAP;QACE,YAAA,GAAe;QACf,IAAY,cAAZ;UAAA,MAAA,CAAA,EAAA;SAFF;OAJA;;AAQA,aAAO;IAVA,EATT;;IAqBA,MAAM,CAAC,EAAP,CAAU,OAAV,EAAmB,QAAA,CAAA,CAAA;aAAG,MAAA,CAAA;IAAH,CAAnB,EArBA;;IAuBA,CAAA,GAAc,cAAc,CAAC,IAAf,CAAoB,MAApB,EAA4B,QAAA,CAAE,KAAF,CAAA;aAAa,MAAA,CAAO,KAAP;IAAb,CAA5B;IACd,WAAA,GAAc;MAAE,IAAA,EAAM,wBAAR;MAAkC,MAAlC;MAA0C;IAA1C;AACd,WAAO,IAAC,CAAA,YAAD,CAAc,CAAd,EAAiB,WAAjB;EA5BiB,EAxE1B;;;EAuGA,IAAC,CAAA,uBAAD,GAA2B,QAAA,CAAE,MAAF,CAAA;WAAc,cAAc,CAAC,MAAf,CAAsB,MAAtB;EAAd,EAvG3B;;;EA0GA,IAAC,CAAA,qBAAD,GAAyB,QAAA,CAAE,IAAF,CAAA,EAAA;;AAEvB,QAAA,CAAA,EAAA;IAAA,CAAA,GAAc,cAAc,CAAC,IAAf,CAAoB,IAApB;IACd,WAAA,GAAc;MAAE,IAAA,EAAM,uBAAR;MAAiC;IAAjC;AACd,WAAO,IAAC,CAAA,YAAD,CAAc,CAAd,EAAiB,WAAjB;EAJgB;AA1GzB",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nbadge                     = 'STEAMPIPES/NJS-STREAMS-AND-FILES'\nFS                        = require 'fs'\n# TO_PULL_STREAM            = require 'stream-to-pull-stream'\n# TO_NODE_STREAM            = require '../deps/pull-stream-to-stream-patched'\n# TO_NODE_STREAM            = require 'pull-stream-to-stream'\ndefer                     = setImmediate\n\n\n\n#===========================================================================================================\n# READ FROM, WRITE TO FILES, NODEJS STREAMS\n#-----------------------------------------------------------------------------------------------------------\n@read_from_file = ( path, options ) ->\n  ### TAINT consider using https://pull-stream.github.io/#pull-file-reader instead ###\n  switch ( arity = arguments.length )\n    when 1 then null\n    when 2\n      if CND.isa_function options\n        [ path, options, on_end, ] = [ path, null, options, ]\n    else throw new Error \"µ9983 expected 1 or 2 arguments, got #{arity}\"\n  #.........................................................................................................\n  return @read_from_nodejs_stream ( FS.createReadStream path, options )\n\n# #-----------------------------------------------------------------------------------------------------------\n# @read_chunks_from_file = ( path, byte_count ) ->\n#   unless ( CND.isa_number byte_count ) and ( byte_count > 0 ) and ( byte_count is parseInt byte_count )\n#     throw new Error \"expected positive integer number, got #{rpr byte_count}\"\n#   pfy           = ( require 'util' ).promisify\n#   source        = @new_push_source()\n#   #.........................................................................................................\n#   defer =>\n#     fd    = await ( pfy FS.open ) path, 'r'\n#     read  = pfy FS.read\n#     loop\n#       buffer = Buffer.alloc byte_count\n#       await read fd, buffer, 0, byte_count, null\n#       source.send buffer\n#     return null\n#   #.........................................................................................................\n#   return source\n\n#-----------------------------------------------------------------------------------------------------------\n@write_to_file = ( path, options, on_end ) ->\n  ### TAINT consider to abandon all sinks except `$drain()` and use throughs with writers instead ###\n  ### TAINT consider using https://pull-stream.github.io/#pull-write-file instead ###\n  ### TAINT code duplication ###\n  switch ( arity = arguments.length )\n    when 1 then null\n    when 2\n      if CND.isa_function options\n        [ path, options, on_end, ] = [ path, null, options, ]\n    when 3\n    else throw new Error \"µ9983 expected 1 to 3 arguments, got #{arity}\"\n  #.........................................................................................................\n  R           = @write_to_nodejs_stream ( FS.createWriteStream path, options ), on_end\n  description = { type: 'write_to_file', path, options, on_end, }\n  return @mark_as_sink R, description\n\n#-----------------------------------------------------------------------------------------------------------\n@read_from_nodejs_stream = ( stream ) ->\n  switch ( arity = arguments.length )\n    when 1 then null\n    else throw new Error \"µ9983 expected 1 argument, got #{arity}\"\n  #.........................................................................................................\n  return TO_PULL_STREAM.source stream, ( error ) -> finish error\n\n#-----------------------------------------------------------------------------------------------------------\n@write_to_nodejs_stream = ( stream, on_end ) ->\n  ### TAINT consider to abandon all sinks except `$drain()` and use throughs with writers instead ###\n  ### TAINT code duplication ###\n  switch ( arity = arguments.length )\n    when 1, 2 then null\n    else throw new Error \"µ9983 expected 1 or 2 arguments, got #{arity}\"\n  #.........................................................................................................\n  if on_end? and ( ( type = CND.type_of on_end ) isnt 'function' )\n    throw new Error \"µ9383 expected a function, got a #{type}\"\n  #.........................................................................................................\n  has_finished = false\n  #.........................................................................................................\n  finish = ( error ) ->\n    ### In case there was an error, throw it: ###\n    if error?\n      has_finished = true\n      throw error if error?\n    #.......................................................................................................\n    if not has_finished\n      has_finished = true\n      on_end() if on_end?\n    #.......................................................................................................\n    return null\n  #.........................................................................................................\n  stream.on 'close', -> finish()\n  #.........................................................................................................\n  R           = TO_PULL_STREAM.sink stream, ( error ) -> finish error\n  description = { type: 'write_to_nodejs_stream', stream, on_end, }\n  return @mark_as_sink R, description\n\n#-----------------------------------------------------------------------------------------------------------\n@node_stream_from_source = ( source ) -> TO_NODE_STREAM.source source\n\n#-----------------------------------------------------------------------------------------------------------\n@node_stream_from_sink = ( sink ) ->\n  ### TAINT consider to abandon all sinks except `$drain()` and use throughs with writers instead ###\n  R           = TO_NODE_STREAM.sink sink\n  description = { type: 'node_stream_from_sink', sink, }\n  return @mark_as_sink R, description\n\n\n\n\n\n"
  ]
}