{
  "version": 3,
  "file": "generator-as-source.test.js",
  "sourceRoot": "../..",
  "sources": [
    "src/tests/generator-as-source.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'GENERATOR-AS-SOURCE'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\n#...........................................................................................................\nSP                        = require '../..'\n{ $, $async, }            = SP\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"generator as source: random numbers\" ] = ( T, done ) ->\n  #.........................................................................................................\n  pipeline      = []\n  Ø             = ( x ) => pipeline.push x\n  # expect_count  = Math.max 0, probes.length - width + 1\n  #.........................................................................................................\n  ### TAINT his isn't a generator in the technical sense, but the code from\n  https://github.com/pull-stream/pull-stream/blob/master/sources/infinite.js expanded upon. ###\n  $random = ( n, seed, delta ) ->\n    rnd = CND.get_rnd n, seed, delta\n    return ( end, callback ) ->\n      return callback end   if end\n      return callback true  if 0 > ( n += -1 )\n      callback null, rnd()\n  #.........................................................................................................\n  Ø $random 10, 1, 1\n  Ø SP.$show()\n  Ø SP.$collect()\n  Ø $ { last: null, }, ( data, send ) ->\n    if data?\n      # T.ok section_count is expect_count\n      send data\n    else\n      done()\n      # send null\n  Ø SP.$drain()\n  #.........................................................................................................\n  SP.pull pipeline...\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"generator as source 2\" ] = ( T, done ) ->\n  count = 0\n  #.........................................................................................................\n  g = ( max ) ->\n    loop\n      break if count >= max\n      yield ++count\n    return null\n  #.........................................................................................................\n  await T.perform null, [1,2,3,4,null,6,7,8,9,10], ->\n    return new Promise ( resolve ) ->\n      pipeline = []\n      pipeline.push SP.new_generator_source g 10\n      pipeline.push $ ( d, send ) -> send if d is 5 then null else d\n      pipeline.push SP.$show()\n      pipeline.push SP.$collect()\n      pipeline.push SP.$watch ( d ) ->\n        debug '22920', d\n        resolve d\n      pipeline.push SP.$drain()\n      SP.pull pipeline...\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"generator as source 3\" ] = ( T, done ) ->\n  count = 0\n  #.........................................................................................................\n  g = ->\n    loop\n      yield ++count\n    return null\n  #.........................................................................................................\n  await T.perform null, [1,2,3,4,], -> return new Promise ( resolve ) ->\n    pipeline = []\n    pipeline.push SP.new_generator_source g()\n    pipeline.push SP.$defer()\n    pipeline.push SP.$end_if ( d ) -> d is 5\n    pipeline.push SP.$show()\n    pipeline.push SP.$collect()\n    pipeline.push SP.$watch ( d ) ->\n      debug '22920', d\n      resolve d\n    pipeline.push SP.$drain()\n    SP.pull pipeline...\n  done()\n  return null\n\n\n############################################################################################################\nunless module.parent?\n  test @\n\n"
  ]
}