{
  "version": 3,
  "file": "sample.test.js",
  "sourceRoot": "../..",
  "sources": [
    "src/tests/sample.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'STEAMPIPES/TESTS/TEE'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nOS                        = require 'os'\ntest                      = require 'guy-test'\n#...........................................................................................................\nSP                        = require '../..'\n{ $, $async, }            = SP\n#...........................................................................................................\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"sample (p = 0)\" ] = ( T, done ) ->\n  probe             = Array.from '𠳬矗㒹兢林森𣡕𣡽𨲍騳𩥋驫𦣦臦𦣩𫇆'\n  matcher           = ''\n  source            = SP.new_value_source Array.from probe\n  #.........................................................................................................\n  pipeline = []\n  pipeline.push source\n  pipeline.push SP.$sample 0\n  pipeline.push SP.$collect()\n  pipeline.push SP.$watch ( chrs ) ->\n    chrs = chrs.join ''\n    help chrs, chrs.length\n    T.ok CND.equals chrs, matcher\n  pipeline.push SP.$drain done\n  #.........................................................................................................\n  SP.pull pipeline...\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"sample (p = 1)\" ] = ( T, done ) ->\n  probe             = '𠳬矗㒹兢林森𣡕𣡽𨲍騳𩥋驫𦣦臦𦣩𫇆'\n  matcher           = probe\n  source            = SP.new_value_source Array.from probe\n  #.........................................................................................................\n  pipeline = []\n  pipeline.push source\n  pipeline.push SP.$sample 1\n  pipeline.push SP.$collect()\n  pipeline.push SP.$watch ( chrs ) ->\n    chrs = chrs.join ''\n    help chrs, chrs.length\n    T.ok CND.equals chrs, matcher\n  pipeline.push SP.$drain done\n  #.........................................................................................................\n  SP.pull pipeline...\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"sample (1)\" ] = ( T, done ) ->\n  probe             = '𠳬矗㒹兢林森𣡕𣡽𨲍騳𩥋驫𦣦臦𦣩𫇆'\n  matcher           = '𠳬㒹森𣡽𨲍騳𩥋𦣦臦𦣩𫇆'\n  source            = SP.new_value_source Array.from probe\n  #.........................................................................................................\n  pipeline = []\n  pipeline.push source\n  pipeline.push SP.$sample 8 / 16, seed: 6615\n  pipeline.push SP.$collect()\n  pipeline.push SP.$watch ( data ) ->\n    help ( data.join '' ), data.length\n  pipeline.push SP.$drain done\n  #.........................................................................................................\n  SP.pull pipeline...\n  return null\n\n############################################################################################################\nunless module.parent?\n  test @\n\n"
  ]
}