{
  "version": 3,
  "file": "html-parser.js",
  "sourceRoot": "../..",
  "sources": [
    "src/tests/html-parser.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'STEAMPIPES/TESTS/HTML-PARSER'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nOS                        = require 'os'\ntest                      = require 'guy-test'\n#...........................................................................................................\nSP                        = require '../..'\n{ $\n  $async\n  $watch\n  $show  }                = SP.export()\n#...........................................................................................................\nread                      = ( path ) -> FS.readFileSync path, { encoding: 'utf-8', }\ndefer                     = setImmediate\n{ inspect, }              = require 'util'\nxrpr                      = ( x ) -> inspect x, { colors: yes, breakLength: Infinity, maxArrayLength: Infinity, depth: Infinity, }\njr                        = JSON.stringify\n\n#-----------------------------------------------------------------------------------------------------------\nprobes_and_matchers = [\n  [\"<!DOCTYPE html>\"]\n  [\"<title>MKTS</title>\"]\n  [\"<document/>\"]\n  [\"<foo bar baz=42>\"]\n  [\"something\"]\n  [\"<br/>\"]\n  [\"else\"]\n  [\"</thing>\"]\n  [\"</foo>\"]\n  [\"</document>\"]\n  [\"<title>MKTS</title>\"]\n  [\"<p foo bar=42>omg</p>\"]\n  [\"<document/><foo bar baz=42>something<br/>else</thing></foo>\"]\n  [\"<!DOCTYPE html><html lang=en><head><title>x</title></head><p data-x='<'>helo</p></html>\"]\n  [\"<p foo bar=42><em>Yaffir stood high</em></p>\"]\n  [\"<p foo bar=42><em><xxxxxxxxxxxxxxxxxxx>Yaffir stood high</p>\"]\n  [\"<p föö bär=42><em>Yaffir stood high</p>\"]\n  [\"<document 文=zh/><foo bar baz=42>something<br/>else</thing></foo>\"]\n  [\"<p foo bar=<>yeah</p>\"]\n  [\"<p foo bar='<'>yeah</p>\"]\n  [\"<p foo bar='&lt;'>yeah</p>\"]\n  [\"<<<<<\"]\n  [\"𦇻𦑛𦖵𦩮𦫦𧞈\"]\n  ]\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"_parse html to list\" ] = ( T, done ) ->\n  PARSER = require '../html-parser'\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    matcher = null\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      R = null\n      help CND.red html\n      parse = PARSER.new_parse_method()\n      for d in parse html\n        if d.text?\n          info d.$key, ( CND.white jr d.text )\n        else\n          if d.data? # and ( Object.keys d.data ).length > 0\n            info d.$key, ( CND.yellow jr d.data )\n          else\n            info d.$key\n      # R           = []\n      # source      = probe\n      # #.....................................................................................................\n      # pipeline_A  = []\n      # pipeline_A.push source\n      # pipeline_A.push SP.$watch ( d ) -> info xrpr d\n      # pipeline_A.push SP.$collect { collector: R, }\n      # length_of_A = pipeline_A.length\n      # duct_A = SP.pull pipeline_A...\n      # T.eq duct_A.transforms.length,  length_of_A\n      # T.eq duct_A.type,               'source'\n      resolve R\n      return null\n    #.........................................................................................................\n    done()\n  return null\n\n\n############################################################################################################\nunless module.parent?\n  # test @, 'timeout': 30000\n  test @[ \"parse html to list\" ]\n\n\n\n\n\n\n\n"
  ]
}