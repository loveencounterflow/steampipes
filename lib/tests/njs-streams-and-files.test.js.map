{
  "version": 3,
  "file": "njs-streams-and-files.test.js",
  "sourceRoot": "../..",
  "sources": [
    "src/tests/njs-streams-and-files.test.coffee"
  ],
  "names": [],
  "mappings": ";AAIA;EAAA;AAAA,MAAA,CAAA,EAAA,MAAA,EAAA,KAAA,EAAA,MAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,GAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAf5B;;;EAiBA,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,EAAA,GAA4B,OAAA,CAAQ,IAAR;;EAC5B,EAAA,GAA4B,OAAA,CAAQ,IAAR;;EAC5B,IAAA,GAA4B,OAAA,CAAQ,UAAR;;EAC5B,CAAA,CAAE,EAAF,CAAA,GAA4B,GAA5B,EArBA;;;EAuBA,EAAA,GAA4B,OAAA,CAAQ,OAAR;;EAC5B,CAAA,CAAE,CAAF,EACE,MADF,EAEE,MAFF,EAGE,KAHF,CAAA,GAG4B,EAAE,CAAC,MAAH,CAAA,CAH5B;;EAIA,KAAA,GAA4B,aA5B5B;;;EA+BA,IAAG,CAAA,oBAAA,CAAH,GAA4B,MAAA,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA,EAAA;;AAE1B,QAAA,KAAA,EAAA,OAAA,EAAA,IAAA,EAAA;IAAA,IAAA,GAAY;IACZ,IAAsB,EAAE,CAAC,UAAH,CAAc,IAAd,CAAtB;MAAA,EAAE,CAAC,UAAH,CAAc,IAAd,EAAA;;IACA,KAAA,GAAY,8BAA8B,CAAC,KAA/B,CAAqC,KAArC;IACZ,OAAA,GAAY;IACZ,KAAA,GAAY;IACZ,MAAM,CAAC,CAAC,OAAF,CAAU,KAAV,EAAiB,OAAjB,EAA0B,KAA1B,EAAiC,QAAA,CAAA,CAAA;AAAG,aAAO,IAAI,OAAJ,CAAY,QAAA,CAAE,OAAF,EAAW,MAAX,CAAA;AAC3D,YAAA,CAAA,EAAA,QAAA,EAAA;QAAA,CAAA,GAAc;QACd,MAAA,GAAc,MADd;;QAGA,QAAA,GAAc;QACd,QAAQ,CAAC,IAAT,CAAc,MAAd;QACA,QAAQ,CAAC,IAAT,CAAc,CAAA,CAAE,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;iBAAe,IAAA,CAAK,CAAA,GAAI,IAAT;QAAf,CAAF,CAAd;QACA,QAAQ,CAAC,IAAT,CAAc,MAAA,CAAO,QAAA,CAAE,CAAF,CAAA;iBAAS,IAAA,CAAK,UAAL,EAAiB,EAAA,CAAG,CAAH,CAAjB;QAAT,CAAP,CAAd,EANA;;QAQA,QAAQ,CAAC,IAAT,CAAc,EAAE,CAAC,sBAAH,CAA0B,IAA1B,CAAd;QACA,QAAQ,CAAC,IAAT,CAAc,EAAE,CAAC,MAAH,CAAU,QAAA,CAAE,IAAF,CAAA;AACtB,cAAA;UAAA,OAAA,GAAU,IAAI,CAAC,IAAL,CAAU,EAAV;UACV,IAAG,EAAE,CAAC,UAAH,CAAc,IAAd,CAAH;YAA4B,MAAA,GAAU,EAAE,CAAC,YAAH,CAAgB,IAAhB,EAAsB;cAAE,QAAA,EAAU;YAAZ,CAAtB,EAAtC;WAAA,MAAA;YAC4B,MAAA,GAAU,KADtC;WADA;;UAIA,CAAC,CAAC,EAAF,CAAK,MAAL,EAAa,OAAb;UACA,IAAA,CAAK,IAAL;iBACA,OAAA,CAAQ,IAAR;QAPsB,CAAV,CAAd;QAQA,EAAE,CAAC,IAAH,CAAQ,GAAA,QAAR;AACA,eAAO;MAnBoD,CAAZ;IAAV,CAAjC,EALN;;IA0BA,IAAA,CAAA;AACA,WAAO;EA7BmB,EA/B5B;;;EAgEA,IAAO,qBAAP;IACE,IAAA,CAAK,IAAL,EAAQ;MAAA,SAAA,EAAW;IAAX,CAAR,EADF;;AAhEA",
  "sourcesContent": [
    "\n\n\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'STEAMPIPES/TESTS/NJS-STREAMS-AND-FILES'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nOS                        = require 'os'\ntest                      = require 'guy-test'\n{ jr }                    = CND\n#...........................................................................................................\nSP                        = require '../..'\n{ $\n  $async\n  $watch\n  $show  }                = SP.export()\ndefer                     = setImmediate\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"write to file sync\" ] = ( T, done ) ->\n  ### TAINT use proper tmpfile ###\n  path      = '/tmp/steampipes-testfile.txt'\n  FS.unlinkSync path if FS.existsSync path\n  probe     = \"just a bunch of words really\".split /\\s+/\n  matcher   = null\n  error     = null\n  await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n    R           = []\n    source      = probe\n    #.......................................................................................................\n    pipeline    = []\n    pipeline.push source\n    pipeline.push $ ( d, send ) -> send d + '\\n'\n    pipeline.push $watch ( d ) -> info 'mainline', jr d\n    # pipeline.push SP.tee_write_to_file path\n    pipeline.push SP.tee_write_to_file_sync path\n    pipeline.push SP.$drain ( sink ) ->\n      matcher = sink.join ''\n      if FS.existsSync path then  result  = FS.readFileSync path, { encoding: 'utf-8', }\n      else                        result  = null\n      # urge 'Âµ77655', ( jr result ), ( jr matcher )\n      T.eq result, matcher\n      help 'ok'\n      resolve null\n    SP.pull pipeline...\n    return null\n  #.........................................................................................................\n  done()\n  return null\n\n\n############################################################################################################\nunless module.parent?\n  test @, 'timeout': 30000\n\n\n\n\n"
  ]
}