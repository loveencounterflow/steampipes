{
  "version": 3,
  "file": "async.test.js",
  "sourceRoot": "../..",
  "sources": [
    "src/tests/async.test.coffee"
  ],
  "names": [],
  "mappings": ";AACA;EAAA;AAAA,MAAA,CAAA,EAAA,MAAA,EAAA,WAAA,EAAA,KAAA,EAAA,MAAA,EAAA,GAAA,EAAA,EAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAGA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAZ5B;;;EAcA,IAAA,GAA4B,OAAA,CAAQ,UAAR;;EAC5B,EAAA,GAA4B,IAAI,CAAC,UAfjC;;;EAiBA,EAAA,GAA4B,OAAA,CAAQ,OAAR;;EAC5B,CAAA,CAAE,CAAF,EACE,MADF,EAEE,MAFF,EAGE,KAHF,CAAA,GAG4B,EAAE,CAAC,MAAH,CAAA,CAH5B;;EAIA,KAAA,GAA4B,aAtB5B;;;EAyBA,KAAA,GAAQ,QAAA,CAAE,GAAF,EAAO,CAAP,CAAA;WAAc,UAAA,CAAW,CAAX,EAAc,GAAA,GAAM,IAApB;EAAd,EAzBR;;;EA4BA,IAAG,CAAA,SAAA,CAAH,GAAiB,MAAA,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AACf,QAAA,CAAA,EAAA,GAAA,EAAA,OAAA,EAAA,EAAA,EAAA,KAAA,EAAA,GAAA,EAAA;IAAA,EAAA,GAAsB;IACtB,CAAE,KAAF,EAAS,OAAT,CAAA,GAAsB,CAAC,QAAD,EAAU,qCAAV;AACtB;IAAA,KAAA,qCAAA;;MACE,MAAS,CAAA,CAAA,CAAA,GAAA;eAAG,IAAI,OAAJ,CAAY,CAAE,OAAF,CAAA,GAAA;AACtB,cAAA;UAAA,QAAA,GAAsB;UACtB,QAAQ,CAAC,IAAT,CAAc,KAAd,EADA;;UAGA,IAAG,SAAH;YACE,QAAQ,CAAC,IAAT,CAAc,MAAA,CAAO,QAAA,CAAE,CAAF,EAAK,IAAL,EAAW,IAAX,CAAA;cACnB,KAAA,CAAM,QAAA,CAAA,CAAA;uBAAG,IAAA,CAAK,CAAA,CAAA,CAAA,CAAI,CAAJ,CAAA,CAAL;cAAH,CAAN;qBACA,KAAA,CAAM,GAAN,EAAW,QAAA,CAAA,CAAA;gBAAG,IAAA,CAAK,CAAA,CAAA,CAAA,CAAI,CAAJ,CAAA,CAAL;uBAAc,IAAA,CAAA;cAAjB,CAAX;YAFmB,CAAP,CAAd,EADF;WAAA,MAAA;YAKE,QAAQ,CAAC,IAAT,CAAc,CAAA,CAAE,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;cACd,IAAA,CAAK,CAAA,CAAA,CAAA,CAAI,CAAJ,CAAA,CAAL;qBACA,IAAA,CAAK,CAAA,CAAA,CAAA,CAAI,CAAJ,CAAA,CAAL;YAFc,CAAF,CAAd,EALF;WAHA;;UAYA,QAAQ,CAAC,IAAT,CAAc,EAAE,CAAC,SAAH,CAAa;YAAE,OAAA,EAAS;UAAX,CAAb,CAAd;UACA,QAAQ,CAAC,IAAT,CAAc,EAAE,CAAC,KAAH,CAAA,CAAd,EAbA;;UAeA,QAAQ,CAAC,IAAT,CAAc,EAAE,CAAC,MAAH,CAAU,QAAA,CAAE,MAAF,CAAA;YACtB,IAAA,CAAK,GAAG,CAAC,IAAJ,CAAS,EAAA,CAAG,CAAE,KAAF,EAAS,MAAT,CAAH,CAAT,CAAL;YACA,CAAC,CAAC,EAAF,CAAK,MAAL,EAAa,OAAb;mBACA,EAAA,GAAK;UAHiB,CAAV,CAAd,EAfA;;UAoBA,QAAQ,CAAC,IAAT,CAAc,EAAE,CAAC,MAAH,CAAU,QAAA,CAAA,CAAA;YACtB,IAAA,CAAoC,EAApC;cAAA,CAAC,CAAC,IAAF,CAAO,qBAAP,EAAA;;mBACA,OAAA,CAAA;UAFsB,CAAV,CAAd,EApBA;;iBAwBA,EAAE,CAAC,IAAH,CAAQ,GAAA,QAAR;QAzBsB,CAAZ;MAAH,CAAA,CAAH,CAAA;IADR;IA2BA,IAAA,CAAA;AACA,WAAO;EA/BQ,EA5BjB;;;EA8DA,WAAA,GAAc,QAAA,CAAA,CAAA;AACZ,WAAO,MAAA,CAAO,QAAA,CAAE,CAAF,EAAK,IAAL,EAAW,IAAX,CAAA;AACZ,UAAA,KAAA,EAAA,CAAA,EAAA;MAAA,KAAA,GAAQ;MACR,KAAU,4BAAV;QACK,CAAA,QAAA,CAAE,CAAF,EAAK,EAAL,CAAA;AACD,cAAA;UAAA,EAAA,GAAK,IAAI,CAAC,MAAL,CAAA,CAAA,GAAgB;iBACrB,KAAA,CAAM,EAAN,EAAU,QAAA,CAAA,CAAA;YACR,KAAA,IAAS;YACT,IAAA,CAAK,CAAA,CAAA,CAAA,CAAI,CAAJ,CAAM,CAAN,CAAA,CAAS,EAAT,CAAY,CAAZ,CAAL;YACA,IAAU,KAAA,KAAS,CAAnB;qBAAA,IAAA,CAAA,EAAA;;UAHQ,CAAV;QAFC,CAAA,CAAH,CAAK,CAAL,EAAQ,EAAR;MADF;AAOA,aAAO;IATK,CAAP;EADK,EA9Dd;;;EA2EA,IAAG,CAAA,SAAA,CAAH,GAAiB,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AACf,QAAA,OAAA,EAAA,EAAA,EAAA,QAAA,EAAA;IAAA,EAAA,GAAY;IACZ,KAAA,GAAY;IACZ,OAAA,GAAY;IACZ,QAAA,GAAY;IACZ,QAAQ,CAAC,IAAT,CAAc,KAAK,CAAC,IAAN,CAAW,KAAX,CAAd;IACA,QAAQ,CAAC,IAAT,CAAc,WAAA,CAAA,CAAd,EALA;;IAOA,QAAQ,CAAC,IAAT,CAAc,EAAE,CAAC,KAAH,CAAA,CAAd;IACA,QAAQ,CAAC,IAAT,CAAc,EAAE,CAAC,KAAH,CAAA,CAAd,EARA;;IAUA,QAAQ,CAAC,IAAT,CAAc,EAAE,CAAC,MAAH,CAAU,QAAA,CAAE,MAAF,CAAA;MACtB,CAAC,CAAC,EAAF,CAAK,MAAL,EAAa,OAAb;aACA,EAAA,GAAK;IAFiB,CAAV,CAAd,EAVA;;IAcA,QAAQ,CAAC,IAAT,CAAc,EAAE,CAAC,MAAH,CAAU,QAAA,CAAE,CAAF,CAAA;aAAS,IAAA,CAAK,CAAL;IAAT,CAAV,CAAd;IACA,QAAQ,CAAC,IAAT,CAAc,EAAE,CAAC,MAAH,CAAU,QAAA,CAAA,CAAA;MACtB,IAAA,CAAoC,EAApC;QAAA,CAAC,CAAC,IAAF,CAAO,qBAAP,EAAA;;aACA,IAAA,CAAA;IAFsB,CAAV,CAAd,EAfA;;;IAoBA,EAAE,CAAC,IAAH,CAAQ,GAAA,QAAR;AACA,WAAO;EAtBQ,EA3EjB;;;EAqGA,IAAO,qBAAP;IACE,IAAA,CAAK,IAAL,EAAQ;MAAE,OAAA,EAAS;IAAX,CAAR,EADF;;;EArGA;;AAAA",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'STEAMPIPES/TESTS/ASYNC'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\njr                        = JSON.stringify\n#...........................................................................................................\nSP                        = require '../..'\n{ $\n  $async\n  $watch\n  $show }                 = SP.export()\ndefer                     = setImmediate\n\n#-----------------------------------------------------------------------------------------------------------\nafter = ( dts, f ) -> setTimeout f, dts * 1000\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"async 0\" ] = ( T, done ) ->\n  ok                  = false\n  [ probe, matcher, ] = [\"abcdef\",\"1a-2a-1b-2b-1c-2c-1d-2d-1e-2e-1f-2f\"]\n  for use_async in [ true, false, ]\n    await do => new Promise ( resolve ) =>\n      pipeline            = []\n      pipeline.push probe\n      # pipeline.push $watch ( d ) -> info 'µ1', jr d\n      if use_async\n        pipeline.push $async ( d, send, done ) ->\n          defer -> send \"1#{d}\"\n          after 0.1, -> send \"2#{d}\"; done()\n      else\n        pipeline.push $ ( d, send ) ->\n          send \"1#{d}\"\n          send \"2#{d}\"\n      # pipeline.push $watch ( d ) -> urge 'µ2', jr d\n      pipeline.push SP.$surround { between: '-', }\n      pipeline.push SP.$join()\n      #.........................................................................................................\n      pipeline.push SP.$watch ( result ) ->\n        echo CND.gold jr [ probe, result, ]\n        T.eq result, matcher\n        ok = true\n      #.........................................................................................................\n      pipeline.push SP.$drain ->\n        T.fail \"failed to pass test\" unless ok\n        resolve()\n      #.........................................................................................................\n      SP.pull pipeline...\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n$send_three = ->\n  return $async ( d, send, done ) ->\n    count = 0\n    for nr in [ 1 .. 3 ]\n      do ( d, nr ) ->\n        dt = Math.random() / 10\n        after dt, ->\n          count += 1\n          send \"(#{d}:#{nr})\"\n          done() if count is 3\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"async 2\" ] = ( T, done ) ->\n  ok        = false\n  probe     = \"fdcabe\"\n  matcher   = \"(a:1)(a:2)(a:3)(b:1)(b:2)(b:3)(c:1)(c:2)(c:3)(d:1)(d:2)(d:3)(e:1)(e:2)(e:3)(f:1)(f:2)(f:3)\"\n  pipeline  = []\n  pipeline.push Array.from probe\n  pipeline.push $send_three()\n  # pipeline.push $show { title: '2', }\n  pipeline.push SP.$sort()\n  pipeline.push SP.$join()\n  #.........................................................................................................\n  pipeline.push SP.$watch ( result ) ->\n    T.eq result, matcher\n    ok = true\n  #.........................................................................................................\n  pipeline.push SP.$watch ( d ) -> urge d\n  pipeline.push SP.$drain ->\n    T.fail \"failed to pass test\" unless ok\n    done()\n  #.........................................................................................................\n  # T.throws /contains asynchronous transform/, -> SP.pull pipeline...\n  SP.pull pipeline...\n  return null\n\n\n############################################################################################################\nunless module.parent?\n  test @, { timeout: 10000, }\n  # test @[ \"async 0\" ], { timeout: 10000, }\n  # test @[ \"async 2\" ], { timeout: 10000, }\n\n\n\n"
  ]
}