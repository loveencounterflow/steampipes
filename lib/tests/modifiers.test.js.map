{
  "version": 3,
  "file": "modifiers.test.js",
  "sourceRoot": "../..",
  "sources": [
    "src/tests/modifiers.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'STEAMPIPES/TESTS/MODIFIERS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nOS                        = require 'os'\ntest                      = require 'guy-test'\n#...........................................................................................................\n# SP                        = require '../..'\n# { $\n#   $async\n#   $watch\n#   $show  }                = SP.export()\n#...........................................................................................................\ntypes                     = require '../types'\n{ isa\n  validate\n  type_of }               = types\n#...........................................................................................................\nread                      = ( path ) -> FS.readFileSync path, { encoding: 'utf-8', }\ndefer                     = setImmediate\n{ inspect, }              = require 'util'\nxrpr                      = ( x ) -> inspect x, { colors: yes, breakLength: Infinity, maxArrayLength: Infinity, depth: Infinity, }\njr                        = JSON.stringify\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"modifiers ($before_first)\" ] = ( T, done ) ->\n  SP = require '../..'\n  #.........................................................................................................\n  { $\n    $async\n    $drain\n    $before_first\n    $show } = SP.export()\n  #.........................................................................................................\n  $transform = =>\n    return $before_first ( send ) ->\n      debug '^12287^'\n      send \"may I introduce\"\n  #.........................................................................................................\n  do =>\n    source    = \"Behind the Looking-Glass\".split /\\s+/\n    matcher   = [\"may I introduce\",\"Behind\",\"the\",\"Looking-Glass\"]\n    pipeline  = []\n    pipeline.push source\n    pipeline.push $transform()\n    pipeline.push $show()\n    pipeline.push $drain ( result ) =>\n      help jr result\n      T.eq result, matcher\n      done()\n    SP.pull pipeline...\n    return null\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"modifiers ($after_last)\" ] = ( T, done ) ->\n  SP = require '../..'\n  #.........................................................................................................\n  { $\n    $async\n    $drain\n    $after_last\n    $show } = SP.export()\n  #.........................................................................................................\n  $transform = =>\n    return $after_last ( send ) ->\n      debug '^12287^'\n      send \"is an interesting book\"\n  #.........................................................................................................\n  do =>\n    source    = \"Behind the Looking-Glass\".split /\\s+/\n    matcher   = [\"Behind\",\"the\",\"Looking-Glass\",\"is an interesting book\"]\n    pipeline  = []\n    pipeline.push source\n    pipeline.push $transform()\n    pipeline.push $show()\n    pipeline.push $drain ( result ) =>\n      help jr result\n      T.eq result, matcher\n      done()\n    SP.pull pipeline...\n    return null\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"modifiers ($async_before_first)\" ] = ( T, done ) ->\n  SP = require '../..'\n  #.........................................................................................................\n  { $\n    $async\n    $drain\n    $async_before_first\n    $show } = SP.export()\n  #.........................................................................................................\n  $transform = =>\n    return $async_before_first ( send, done ) ->\n      debug '^12287^'\n      defer ->\n        send \"may I introduce\"\n        done()\n      return null\n  #.........................................................................................................\n  do =>\n    source    = \"Behind the Looking-Glass\".split /\\s+/\n    matcher   = [\"may I introduce\",\"Behind\",\"the\",\"Looking-Glass\"]\n    pipeline  = []\n    pipeline.push source\n    pipeline.push $transform()\n    pipeline.push $show()\n    pipeline.push $drain ( result ) =>\n      help jr result\n      T.eq result, matcher\n      done()\n    SP.pull pipeline...\n    return null\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"modifiers ($async_after_last)\" ] = ( T, done ) ->\n  SP = require '../..'\n  #.........................................................................................................\n  { $\n    $async\n    $drain\n    $async_after_last\n    $show } = SP.export()\n  #.........................................................................................................\n  $transform = =>\n    return $async_after_last ( send, done ) ->\n      debug '^12287^'\n      defer ->\n        send \"is an interesting book\"\n        done()\n      return null\n  #.........................................................................................................\n  do =>\n    source    = \"Behind the Looking-Glass\".split /\\s+/\n    matcher   = [\"Behind\",\"the\",\"Looking-Glass\",\"is an interesting book\"]\n    pipeline  = []\n    pipeline.push source\n    pipeline.push $transform()\n    pipeline.push $show()\n    pipeline.push $drain ( result ) =>\n      help jr result\n      T.eq result, matcher\n      done()\n    SP.pull pipeline...\n    return null\n  #.........................................................................................................\n  return null\n\n\n############################################################################################################\nunless module.parent?\n  # test @\n  # test @[ \"modifiers ($before_first)\" ]\n  # test @[ \"modifiers ($after_last)\" ]\n  # test @[ \"modifiers ($async_before_first)\" ]\n  test @[ \"modifiers ($async_after_last)\" ]\n\n\n\n\n\n\n\n"
  ]
}