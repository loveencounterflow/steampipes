// Generated by CoffeeScript 2.5.0
(function() {
  //###########################################################################################################
  /* TAINT can't return multiple values */
  var $next, $show, $upper_case, CND, FS, OS, PATH, SP, alert, badge, d, debug, echo, help, info, isa, jr, log, rpr, test, type_of, urge, validate, warn, whisper;

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'STEAMPIPES/TESTS/WYE2';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  PATH = require('path');

  FS = require('fs');

  OS = require('os');

  test = require('guy-test');

  //...........................................................................................................
  SP = require('../..');

  // { $
  //   $async
  //   $drain
  //   $watch
  //   $show  }                = SP.export()
  ({d} = CND);

  //...........................................................................................................
  ({isa, validate, type_of} = require('./types'));

  ({jr} = CND);

  //-----------------------------------------------------------------------------------------------------------
  $show = function(Q) {
    return (d) => {
      var ref;
      info((ref = Q.title) != null ? ref : '-->', jr(d));
      return d;
    };
  };

  $upper_case = function() {
    return (d) => {
      validate.text(d);
      return d.toUpperCase();
    };
  };

  $next = function(source) {
    return (d) => {
      return source.next();
    };
  };

  //-----------------------------------------------------------------------------------------------------------
  this["single source"] = async function(T, done) {
    var error, matcher, probe;
    [probe, matcher, error] = [["abcdef", "1234"], "A1B2C3D4EF", null];
    await T.perform(probe, matcher, error, function() {
      return new Promise(async function(resolve, reject) {
        var collector, pipeline, ref, source_1;
        [source_1] = probe;
        pipeline = async function*() {
          var ref;
          ref = (await SP.new_value_source(source_1));
          // debug '^322411^', type_of SP.new_value_source source_1
          for (d of ref) {
            d = (await ($upper_case())(d));
            d = (await ($show({
              title: 'µ53211'
            }))(d));
            yield d;
          }
          return null;
        };
        // debug '^40490^', type_of pipeline
        // debug '^40490^', type_of pipeline()
        collector = [];
        ref = (await pipeline());
        for await (d of ref) {
          collector.push(d);
        }
        // SP.pull pipeline...
        //     d = await $drain ( Σ ) -> resolve Σ.join ''
        // yield return
        debug(collector);
        return resolve(collector.join());
      });
    });
    //.........................................................................................................
    done();
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this["_mutiple sources"] = async function(T, done) {
    var error, matcher, probe;
    [probe, matcher, error] = [["abcdef", "1234"], "A1B2C3D4EF", null];
    await T.perform(probe, matcher, error, function() {
      return new Promise(function(resolve, reject) {
        var pipeline, source_1, source_2;
        [source_1, source_2] = probe;
        pipeline = [];
        pipeline.push(source_1);
        pipeline.push(source_2);
        pipeline.push($(function(d, send) {
          return send(d.toUpperCase());
        }));
        pipeline.push($show({
          title: 'µ53211'
        }));
        pipeline.push($drain(function(Σ) {
          return resolve(Σ.join(''));
        }));
        SP.pull(...pipeline);
        return null;
      });
    });
    //.........................................................................................................
    done();
    return null;
  };

  //###########################################################################################################
  if (module.parent == null) {
    test(this); // , 'timeout': 30000
  }

  // test @[ "mutiple sources" ]

}).call(this);

//# sourceMappingURL=frameworkless-pipelines.js.map
