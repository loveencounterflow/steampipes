{
  "version": 3,
  "file": "windowing.js",
  "sourceRoot": "../..",
  "sources": [
    "src/experiments/windowing.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'STEAMPIPES/WINDOWING'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n{ jr }                    = CND\nassign                    = Object.assign\n#...........................................................................................................\n{ isa\n  validate\n  type_of }               = require './types'\nmisfit                    = Symbol 'misfit'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@$window = ( settings ) ->\n  ### Moving window over data items in stream. Turns stream of values into stream of\n  lists each `width` elements long. ###\n  defaults                = { width: 3, fallback: null, }\n  settings                = assign {}, defaults, settings\n  validate.pipestreams_$window_settings settings\n  #.........................................................................................................\n  if settings.leapfrog?\n    throw new Error \"µ77871 setting 'leapfrog' only valid for PS.window(), not PS.$window()\"\n  #.........................................................................................................\n  if settings.width is 1\n    return @$ ( d, send ) => send [ d, ]\n  #.........................................................................................................\n  last                    = Symbol 'last'\n  had_value               = false\n  fallback                = settings.fallback\n  buffer                  = ( fallback for _ in [ 1 .. settings.width ] )\n  #.........................................................................................................\n  return @$ { last, }, ( d, send ) =>\n    if d is last\n      if had_value\n        for _ in [ 1 ... settings.width ]\n          buffer.shift()\n          buffer.push fallback\n          send buffer[ .. ]\n      return null\n    had_value = true\n    buffer.shift()\n    buffer.push d\n    send buffer[ .. ]\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$lookaround = ( settings ) ->\n  ### Turns stream of values into stream of lists of values, each `( 2 * delta ) + 1` elements long;\n  unlike `$window()`, will send exactly as many lists as there are values in the stream. Default\n  is `delta: 1`, i.e. you get to see lists `[ prv, d, nxt, ]` where `prv` is the previous value\n  (or the fallback which itself defaults to `null`), `d` is the current value, and `nxt` is the\n  upcoming value (or `fallback` in case the stream will end after this value). ###\n  defaults  = { delta: 1, fallback: null, }\n  settings  = assign {}, defaults, settings\n  validate.pipestreams_$lookaround_settings settings\n  #.........................................................................................................\n  if settings.leapfrog?\n    throw new Error \"µ77872 setting 'leapfrog' only valid for PS.lookaround(), not PS.$lookaround()\"\n  #.........................................................................................................\n  if settings.delta is 0\n    return @$ ( d, send ) => send [ d, ]\n  #.........................................................................................................\n  fallback  = settings.fallback\n  delta     = center = settings.delta\n  pipeline  = []\n  pipeline.push @$window { width: ( 2 * delta + 1 ), fallback: misfit, }\n  pipeline.push @$ ( d, send ) =>\n    # debug 'µ11121', rpr d\n    # debug 'µ11121', rpr ( ( if x is misfit then fallback else x ) for x in d )\n    return null if d[ center ] is misfit\n    send ( ( if x is misfit then fallback else x ) for x in d )\n    return null\n  return @pull pipeline...\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@window = ( settings, transform ) ->\n  switch arity = arguments.length\n    when 1\n      [ settings, transform, ] = [ null, settings, ]\n    when 2 then null\n    else throw new Error \"µ23111 expected 1 or 2 arguments, got #{arity}\"\n  #.........................................................................................................\n  if ( leapfrog = settings?.leapfrog )?\n    delete settings.leapfrog\n  #.........................................................................................................\n  pipeline = []\n  pipeline.push @$window settings\n  pipeline.push transform\n  R = @pull pipeline...\n  #.........................................................................................................\n  if leapfrog?\n    return @leapfrog leapfrog, R\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@lookaround = ( settings, transform ) ->\n  switch arity = arguments.length\n    when 1\n      [ settings, transform, ] = [ null, settings, ]\n    when 2 then null\n    else throw new Error \"µ23112 expected 1 or 2 arguments, got #{arity}\"\n  #.........................................................................................................\n  if ( leapfrog = settings?.leapfrog )?\n    delete settings.leapfrog\n  #.........................................................................................................\n  pipeline = []\n  pipeline.push @$lookaround settings\n  pipeline.push transform\n  R = @pull pipeline...\n  #.........................................................................................................\n  if leapfrog?\n    return @leapfrog leapfrog, R\n  #.........................................................................................................\n  return R\n\n\n\n"
  ]
}