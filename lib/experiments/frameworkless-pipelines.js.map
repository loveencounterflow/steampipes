{
  "version": 3,
  "file": "frameworkless-pipelines.js",
  "sourceRoot": "../..",
  "sources": [
    "src/experiments/frameworkless-pipelines.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'STEAMPIPES/TESTS/WYE2'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nOS                        = require 'os'\ntest                      = require 'guy-test'\n#...........................................................................................................\nSP                        = require '../..'\n# { $\n#   $async\n#   $drain\n#   $watch\n#   $show  }                = SP.export()\n{ d }                     = CND\n#...........................................................................................................\n{ isa\n  validate\n  type_of }               = require './types'\n{ jr }                    = CND\n\n\n#-----------------------------------------------------------------------------------------------------------\n$show = ( Q ) -> ( d ) => info ( Q.title ? '-->' ), jr d; return d\n$upper_case = -> ( d ) => validate.text d; return d.toUpperCase()\n### TAINT can't return multiple values ###\n$next = ( source ) -> ( d ) => source.next()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"single source\" ] = ( T, done ) ->\n  [ probe, matcher, error, ] = [[\"abcdef\",\"1234\"],\"A1B2C3D4EF\",null]\n  await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n    [ source_1 ]  = probe\n    pipeline = ->\n      # debug '^322411^', type_of SP.new_value_source source_1\n      for d from await SP.new_value_source source_1\n        d = await ( $upper_case()               ) d\n        d = await ( $show { title: 'µ53211', }  ) d\n        yield d\n      return null\n    # debug '^40490^', type_of pipeline\n    # debug '^40490^', type_of pipeline()\n    collector = []\n    for await d from await pipeline()\n      collector.push d\n    # SP.pull pipeline...\n    #     d = await $drain ( Σ ) -> resolve Σ.join ''\n    # yield return\n    debug collector\n    resolve collector.join()\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"_mutiple sources\" ] = ( T, done ) ->\n  [ probe, matcher, error, ] = [[\"abcdef\",\"1234\"],\"A1B2C3D4EF\",null]\n  await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n    [ source_1\n      source_2 ]  = probe\n    pipeline      = []\n    pipeline.push source_1\n    pipeline.push source_2\n    pipeline.push $ ( d, send ) -> send d.toUpperCase()\n    pipeline.push $show { title: 'µ53211', }\n    pipeline.push $drain ( Σ ) -> resolve Σ.join ''\n    SP.pull pipeline...\n    return null\n  #.........................................................................................................\n  done()\n  return null\n\n\n\n\n############################################################################################################\nunless module.parent?\n  test @ # , 'timeout': 30000\n  # test @[ \"mutiple sources\" ]\n\n\n\n\n\n\n\n"
  ]
}