{
  "version": 3,
  "file": "sources.js",
  "sourceRoot": "..",
  "sources": [
    "src/sources.coffee"
  ],
  "names": [],
  "mappings": ";AAEA;EAAA;AAAA,MAAA,GAAA,EAAA,MAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IAAA,EAAA,QAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAb5B;;;EAeA,CAAA,CAAE,EAAF,CAAA,GAA4B,GAA5B;;EACA,MAAA,GAA4B,MAAM,CAAC,OAhBnC;;;EAkBA,CAAA,CAAE,GAAF,EACE,QADF,EAEE,OAFF,CAAA,GAE4B,OAAA,CAAQ,SAAR,CAF5B,EAlBA;;;EAuBA,IAAC,CAAA,gBAAD,GAAoB,SAAA,CAAE,CAAF,CAAA;WAAS,CAAA,OAAW,CAAX;EAAT,EAvBpB;;;EA0BA,IAAC,CAAA,eAAD,GAAmB,QAAA,CAAA,CAAA;AACjB,QAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA;IAAA,IAAA,GAAO,CAAE,CAAF,CAAA,GAAA;MACL,IAA8B,cAA9B;AAAA,eAAO,CAAC,CAAC,MAAM,CAAC,IAAT,CAAc,CAAd,EAAP;;MACA,CAAC,CAAC,MAAF,GAAW;MACX,IAAgB,CAAA,KAAK,IAAC,CAAA,OAAO,CAAC,GAA9B;AAAA,eAAO,GAAA,CAAA,EAAP;;MACA,CAAC,CAAC,IAAI,CAAC,OAAS,CAAA,CAAA,CAAG,CAAC,IAApB,CAAyB,CAAzB;MACA,CAAC,CAAC,IAAI,CAAC,gBAAP,CAAA;AACA,aAAO;IANF;IAOP,GAAA,GAAM,CAAA,CAAA,GAAA;AACJ,UAAA,KAAA,EAAA;MAAA,CAAC,CAAC,IAAI,CAAC,OAAS,CAAA,CAAA,CAAG,CAAC,IAApB,CAAyB,IAAC,CAAA,OAAO,CAAC,IAAlC;MACA,CAAC,CAAC,IAAI,CAAC,gBAAP,CAAA;MACA,KAAA,GAAQ,CAAC,CAAC,IAAI,CAAC,UAAY,CAAA,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,MAAlB,GAA2B,CAA3B;MAC3B,IAAG,+BAAH;QACE,IAAG,KAAK,CAAC,gBAAT;UAA+B,KAAK,CAAC,MAAN,CAAa,KAAK,CAAC,IAAnB,EAA/B;SAAA,MAAA;UAA4D,KAAK,CAAC,MAAN,CAAA,EAA5D;SADF;;AAEA,aAAO,CAAC,CAAC,IAAF,GAAS;IANZ;IAON,CAAA,GAAI;aAAG,IAAC,CAAA,KAAK,CAAC,gBAAV;MAAuB,IAAvB;MAA6B,GAA7B;MAAkC,MAAA,EAAQ,EAA1C;MAA8C,IAAA,EAAM;IAApD;AACJ,WAAO;EAhBU;AA1BnB",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'STEAMPIPES/SOURCES'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n{ jr }                    = CND\nassign                    = Object.assign\n#...........................................................................................................\n{ isa\n  validate\n  type_of }               = require './types'\n\n#-----------------------------------------------------------------------------------------------------------\n@new_value_source = ( x ) -> yield from x\n\n#-----------------------------------------------------------------------------------------------------------\n@new_push_source = ->\n  send = ( d ) =>\n    return R.buffer.push d unless R.duct?\n    R.buffer = null\n    return end() if d is @signals.end\n    R.duct.buckets[ 0 ].push d\n    R.duct.exhaust_pipeline()\n    return null\n  end = =>\n    R.duct.buckets[ 0 ].push @signals.last\n    R.duct.exhaust_pipeline()\n    drain = R.duct.transforms[ R.duct.transforms.length - 1 ]\n    if ( on_end = drain.on_end )?\n      if drain.call_with_datoms then drain.on_end drain.sink else drain.on_end()\n    return R.duct = null\n  R = { [@marks.isa_pusher], send, end, buffer: [], duct: null, }\n  return R\n\n"
  ]
}