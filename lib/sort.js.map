{
  "version": 3,
  "file": "sort.js",
  "sourceRoot": "..",
  "sources": [
    "src/sort.coffee"
  ],
  "names": [],
  "mappings": ";AACA;EAAA;AAAA,MAAA,GAAA,EAAA,KAAA,EAAA,KAAA;;;EAGA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B,EAL5B;;;EASA,IAAC,CAAA,KAAD,GAAS,QAAA,CAAE,QAAF,CAAA;AACT,QAAA,SAAA,EAAA;IAAE,IAAA,GAAY,MAAA,CAAO,MAAP;IACZ,QAAA,GAAY;MAAE,GAAA,EAAK,IAAP;MAAa,GAAA;IAAb;IACZ,SAAA,GAAY;AACZ,WAAO,IAAC,CAAA,CAAD,CAAG,CAAE,IAAF,CAAH,EAAc,CAAE,CAAF,EAAK,IAAL,CAAA,GAAA;AACvB,UAAA,CAAA,EAAA,GAAA,EAAA;MAAI,IAAG,CAAA,KAAK,IAAR;QACE,IAAG,4BAAH;UACE,SAAS,CAAC,IAAV,CAAe,CAAE,CAAF,EAAK,CAAL,CAAA,GAAA;YACb,IAAa,CAAC,CAAE,GAAF,CAAD,GAAW,CAAC,CAAE,GAAF,CAAzB;AAAA,qBAAO,CAAC,EAAR;;YACA,IAAa,CAAC,CAAE,GAAF,CAAD,GAAW,CAAC,CAAE,GAAF,CAAzB;AAAA,qBAAO,CAAC,EAAR;;AACA,mBAAQ;UAHK,CAAf,EADF;SAAA,MAAA;UAME,SAAS,CAAC,IAAV,CAAA,EANF;;QAOA,KAAA,2CAAA;;UAAA,IAAA,CAAK,CAAL;QAAA;QACA,SAAS,CAAC,MAAV,GAAmB;AACnB,eAAO,KAVT;;MAWA,SAAS,CAAC,IAAV,CAAe,CAAf;AACA,aAAO;IAbY,CAAd;EAJA;;EATT;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nbadge                     = 'STEAMPIPES/SORT'\ndebug                     = CND.get_logger 'debug',     badge\n\n\n#-----------------------------------------------------------------------------------------------------------\n@$sort = ( settings ) ->\n  last      = Symbol 'last'\n  settings  = { key: null, settings..., }\n  collector = []\n  return @$ { last, }, ( d, send ) =>\n    if d is last\n      if ( key = settings.key )?\n        collector.sort ( a, b ) =>\n          return -1 if a[ key ] < b[ key ]\n          return +1 if a[ key ] > b[ key ]\n          return  0\n      else\n        collector.sort()\n      send d for d in collector\n      collector.length = 0\n      return null\n    collector.push d\n    return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @$sort = ( settings ) ->\n#   ### https://github.com/mziccard/node-timsort ###\n#   TIMSORT   = require 'timsort'\n#   direction = 'ascending'\n#   sorter    = null\n#   key       = null\n#   switch arity = arguments.length\n#     when 0 then null\n#     when 1\n#       direction = settings[ 'direction' ] ? 'ascending'\n#       sorter    = settings[ 'sorter'    ] ? null\n#       key       = settings[ 'key'       ] ? null\n#     else throw new Error \"µ33893 expected 0 or 1 arguments, got #{arity}\"\n#   #.........................................................................................................\n#   unless direction in [ 'ascending', 'descending', ]\n#     throw new Error \"µ34658 expected 'ascending' or 'descending' for direction, got #{rpr direction}\"\n#   #.........................................................................................................\n#   unless sorter?\n#     #.......................................................................................................\n#     type_of = ( x ) =>\n#       ### NOTE for the purposes of magnitude comparison, `Infinity` can be treated as a number: ###\n#       R = CND.type_of x\n#       return if R is 'infinity' then 'number' else R\n#     #.......................................................................................................\n#     validate_type = ( type_a, type_b, include_list = no ) =>\n#       unless type_a is type_b\n#         throw new Error \"µ35423 unable to compare a #{type_a} to a #{type_b}\"\n#       if include_list\n#         unless type_a in [ 'number', 'date', 'text', 'list', ]\n#           throw new Error \"µ36188 unable to compare values of type #{type_a}\"\n#       else\n#         unless type_a in [ 'number', 'date', 'text', ]\n#           throw new Error \"µ36953 unable to compare values of type #{type_a}\"\n#       return null\n#     #.......................................................................................................\n#     if key?\n#       sorter = ( a, b ) =>\n#         a = a[ key ]\n#         b = b[ key ]\n#         validate_type ( type_of a ), ( type_of b ), no\n#         return +1 if ( if direction is 'ascending' then a > b else a < b )\n#         return -1 if ( if direction is 'ascending' then a < b else a > b )\n#         return  0\n#     #.......................................................................................................\n#     else\n#       sorter = ( a, b ) =>\n#         validate_type ( type_a = type_of a ), ( type_b = type_of b ), yes\n#         if type_a is 'list'\n#           a = a[ 0 ]\n#           b = b[ 0 ]\n#           validate_type ( type_of a ), ( type_of b ), no\n#         return +1 if ( if direction is 'ascending' then a > b else a < b )\n#         return -1 if ( if direction is 'ascending' then a < b else a > b )\n#         return  0\n#   #.........................................................................................................\n#   $sort = =>\n#     collector = []\n#     return @$ { last: null, }, ( data, send ) =>\n#       if data?\n#         collector.push data\n#       else\n#         TIMSORT.sort collector, sorter\n#         send x for x in collector\n#         collector.length = 0\n#       return null\n#   #.........................................................................................................\n#   return $sort()\n"
  ]
}