{
  "version": 3,
  "file": "_html-parser.js",
  "sourceRoot": "..",
  "sources": [
    "src/_html-parser.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'STEAMPIPES/HTML-PARSER'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntypes                     = require './types'\n{ isa\n  validate\n  cast\n  last_of\n  type_of }               = types\n# SP                        = require '..'\n# { $\n#   $async\n#   $drain\n#   $watch\n#   $show  }                = SP.export()\n#...........................................................................................................\nDATOM                     = new ( require 'datom' ).Datom { dirty: false, }\n{ new_datom\n  select }                = DATOM.export()\n#...........................................................................................................\nMultimix                  = require 'multimix'\nHtmlParser                = require 'atlas-html-stream'\nL                         = @\n\n#-----------------------------------------------------------------------------------------------------------\n@html5_block_level_tagnames = new Set \"\"\"address article aside blockquote dd details dialog div dl dt\nfieldset figcaption figure footer form h1 h2 h3 h4 h5 h6 header hgroup hr li main nav ol p pre section table\ntd th ul\"\"\".split /\\s+/\n\n#-----------------------------------------------------------------------------------------------------------\n@_new_datom = ( name, data, text ) ->\n  return new_datom '^text', { text, } if text?\n  #.........................................................................................................\n  is_block = @html5_block_level_tagnames.has name\n  unless data?\n    return new_datom '>' + name unless is_block\n    return new_datom '>' + name, { is_block, }\n  #.........................................................................................................\n  has_keys = false\n  for key, value of data\n    has_keys    = true\n    data[ key ] = true if value is ''\n  #.........................................................................................................\n  unless has_keys\n    return new_datom '<' + name unless is_block\n    return new_datom '<' + name, { is_block, }\n  #.........................................................................................................\n  return new_datom '<' + name, { data, } unless is_block\n  return new_datom '<' + name, { data, is_block, }\n\n#-----------------------------------------------------------------------------------------------------------\n@new_onepiece_parser  = -> @_new_parse_method false\n@new_piecemeal_parser = -> @_new_parse_method true\n\n#-----------------------------------------------------------------------------------------------------------\n@_new_parse_method = ( piecemeal ) ->\n  R       = null\n  parser  = new HtmlParser { preserveWS: true, }\n  #.........................................................................................................\n  parser.on 'data', ( { name, data, text, } ) => R.push @_new_datom name, data, text\n  parser.on 'error', ( error ) -> throw error\n  # parser.on 'end', -> R.push new_datom '^stop'\n  #.........................................................................................................\n  R = ( html ) =>\n    R = []\n    parser.write html\n    unless piecemeal\n      parser.flushText()\n      parser.reset()\n    return R\n  #.........................................................................................................\n  R.flush = -> parser.flushText()\n  R.reset = -> parser.reset()\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\nclass Htmlparser extends Multimix\n  # @extend   object_with_class_properties\n  @include L\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( @settings = null ) ->\n    super()\n    # @specs    = {}\n    # @isa      = Multimix.get_keymethod_proxy @, isa\n    # # @validate = Multimix.get_keymethod_proxy @, validate\n    # declarations.declare_types.apply @\n\n############################################################################################################\nmodule.exports  = new Htmlparser()\n\n\n\n\n"
  ]
}