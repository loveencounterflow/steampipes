{
  "version": 3,
  "file": "njs-streams-and-files.js",
  "sourceRoot": "..",
  "sources": [
    "src/njs-streams-and-files.coffee"
  ],
  "names": [],
  "mappings": ";AAEA;EAAA;AAAA,MAAA,GAAA,EAAA,EAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,EAAA,EAAA,OAAA,EAAA,KAAA,EAAA,QAAA,EAAA,IAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,EAAA,GAA4B,OAAA,CAAQ,IAAR,EAR5B;;;;;EAYA,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,OAAA,CAAQ,SAAR;;EAC5B,CAAA,CAAE,EAAF,CAAA,GAA4B,GAA5B;;EACA,CAAA,CAAE,GAAF,EACE,QADF,EAEE,OAFF,CAAA,GAE4B,KAF5B,EAfA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAsDA,IAAC,CAAA,iBAAD,GAAqB,QAAA,CAAE,IAAF,EAAQ,OAAR,CAAA,EAAA;;;;AAInB,QAAA,KAAA,EAAA;AAAA,YAAO,CAAE,KAAA,GAAQ,SAAS,CAAC,MAApB,CAAP;AAAA,WACO,CADP;QACc,MAAA,GAAS,EAAE,CAAC,iBAAH,CAAqB,IAArB;AAAhB;AADP,WAEO,CAFP;QAEc,MAAA,GAAS,EAAE,CAAC,iBAAH,CAAqB,IAArB,EAA2B,OAA3B;AAAhB;AAFP;QAGO,MAAM,IAAI,KAAJ,CAAU,CAAA,qCAAA,CAAA,CAAwC,KAAxC,CAAA,CAAV;AAHb;AAIA,WAAO,IAAC,CAAA,0BAAD,CAA4B,MAA5B;EARY,EAtDrB;;;EAiEA,IAAC,CAAA,sBAAD,GAA0B,QAAA,CAAE,IAAF,EAAQ,OAAR,CAAA;AACxB,WAAO,IAAC,CAAA,MAAD,CAAQ,QAAA,CAAE,CAAF,CAAA;aAAS,EAAE,CAAC,cAAH,CAAkB,IAAlB,EAAwB,CAAxB;IAAT,CAAR;EADiB,EAjE1B;;;;;;;;;;;EA6EA,IAAC,CAAA,0BAAD,GAA8B,QAAA,CAAE,MAAF,CAAA;AAE5B,QAAA,KAAA,EAAA,IAAA;;IAAA,MAAM,IAAI,KAAJ,CAAU,kEAAV;AACN,YAAO,CAAE,KAAA,GAAQ,SAAS,CAAC,MAApB,CAAP;AAAA,WACO,CADP;QACc;AAAP;AADP;QAEO,MAAM,IAAI,KAAJ,CAAU,CAAA,+BAAA,CAAA,CAAkC,KAAlC,CAAA,CAAV;AAFb;IAGA,IAAA,GAAO,MAAA,CAAO,MAAP,EAJP;;IAMA,MAAM,CAAC,EAAP,CAAU,OAAV,EAAmB,QAAA,CAAA,CAAA;aAAG,KAAA,CAAM,QAAN,EAAgB,OAAhB;IAAH,CAAnB;IACA,MAAM,CAAC,EAAP,CAAU,OAAV,EAAmB,QAAA,CAAA,CAAA;MAAG,MAAM;IAAT,CAAnB,EAPA;;AASA,WAAO,IAAC,CAAA,CAAD,CAAG,CAAE,IAAF,CAAH,EAAc,CAAE,CAAF,EAAK,IAAL,CAAA,GAAA;MACnB,IAAgC,CAAA,KAAK,IAArC;QAAA,IAAA,CAAK,uBAAL,EAAA;;MACA,IAAyB,CAAA,KAAK,IAA9B;AAAA,eAAO,MAAM,CAAC,KAAP,CAAA,EAAP;;MACA,IAAA,CAAK,gBAAL,EAAuB,EAAA,CAAG,CAAH,CAAvB;MACA,MAAM,CAAC,KAAP,CAAa,CAAb;aACA,IAAA,CAAK,CAAL;IALmB,CAAd;EAXqB;;EA7E9B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nbadge                     = 'STEAMPIPES/NJS-STREAMS-AND-FILES'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nFS                        = require 'fs'\n# TO_PULL_STREAM            = require 'stream-to-pull-stream'\n# TO_NODE_STREAM            = require '../deps/pull-stream-to-stream-patched'\n# TO_NODE_STREAM            = require 'pull-stream-to-stream'\ndefer                     = setImmediate\ntypes                     = require './types'\n{ jr }                    = CND\n{ isa\n  validate\n  type_of }               = types\n\n\n\n#===========================================================================================================\n# READ FROM, WRITE TO FILES, NODEJS STREAMS\n# #-----------------------------------------------------------------------------------------------------------\n# @read_from_file = ( path, options ) ->\n#   ### TAINT consider using https://pull-stream.github.io/#pull-file-reader instead ###\n#   switch ( arity = arguments.length )\n#     when 1 then null\n#     when 2\n#       if CND.isa_function options\n#         [ path, options, on_end, ] = [ path, null, options, ]\n#     else throw new Error \"µ9983 expected 1 or 2 arguments, got #{arity}\"\n#   #.........................................................................................................\n#   return @read_from_nodejs_stream ( FS.createReadStream path, options )\n\n# #-----------------------------------------------------------------------------------------------------------\n# @read_chunks_from_file = ( path, byte_count ) ->\n#   unless ( CND.isa_number byte_count ) and ( byte_count > 0 ) and ( byte_count is parseInt byte_count )\n#     throw new Error \"expected positive integer number, got #{rpr byte_count}\"\n#   pfy           = ( require 'util' ).promisify\n#   source        = @new_push_source()\n#   #.........................................................................................................\n#   defer =>\n#     fd    = await ( pfy FS.open ) path, 'r'\n#     read  = pfy FS.read\n#     loop\n#       buffer = Buffer.alloc byte_count\n#       await read fd, buffer, 0, byte_count, null\n#       source.send buffer\n#     return null\n#   #.........................................................................................................\n#   return source\n\n#-----------------------------------------------------------------------------------------------------------\n@tee_write_to_file = ( path, options ) ->\n  ### TAINT consider to abandon all sinks except `$drain()` and use throughs with writers instead ###\n  ### TAINT consider using https://pull-stream.github.io/#pull-write-file instead ###\n  ### TAINT code duplication ###\n  switch ( arity = arguments.length )\n    when 1 then stream = FS.createWriteStream path\n    when 2 then stream = FS.createWriteStream path, options\n    else throw new Error \"µ9983 expected 1 to 3 arguments, got #{arity}\"\n  return @tee_write_to_nodejs_stream stream\n\n#-----------------------------------------------------------------------------------------------------------\n@tee_write_to_file_sync = ( path, options ) ->\n  return @$watch ( d ) -> FS.appendFileSync path, d\n\n# #-----------------------------------------------------------------------------------------------------------\n# @read_from_nodejs_stream = ( stream ) ->\n#   switch ( arity = arguments.length )\n#     when 1 then null\n#     else throw new Error \"µ9983 expected 1 argument, got #{arity}\"\n#   #.........................................................................................................\n#   return TO_PULL_STREAM.source stream, ( error ) -> finish error\n\n#-----------------------------------------------------------------------------------------------------------\n@tee_write_to_nodejs_stream = ( stream ) ->\n  ### TAINT code duplication ###\n  throw new Error \"µ76644 method `tee_write_to_nodejs_stream()` not yet implemented\"\n  switch ( arity = arguments.length )\n    when 1 then null\n    else throw new Error \"µ9983 expected 1 argument, got #{arity}\"\n  last = Symbol 'last'\n  #.........................................................................................................\n  stream.on 'close', -> debug 'µ55544', 'close'\n  stream.on 'error', -> throw error\n  #.........................................................................................................\n  return @$ { last, }, ( d, send ) =>\n    warn \"µ87876 closing stream\" if d is last\n    return stream.close() if d is last\n    warn \"µ87876 writing\", jr d\n    stream.write d\n    send d\n\n# #-----------------------------------------------------------------------------------------------------------\n# @tee_write_to_nodejs_stream = ( stream, on_end ) ->\n#   ### TAINT code duplication ###\n#   switch ( arity = arguments.length )\n#     when 1, 2 then null\n#     else throw new Error \"µ9983 expected 1 or 2 arguments, got #{arity}\"\n#   validate.function on_end if on_end?\n#   has_finished  = false\n#   last          = Symbol 'last'\n#   #.........................................................................................................\n#   finish = ( error ) ->\n#     if error?\n#       has_finished = true\n#       throw error if error?\n#     if not has_finished\n#       has_finished = true\n#       on_end() if on_end?\n#     return null\n#   #.........................................................................................................\n#   stream.on 'close', -> finish()\n#   stream.on 'error', -> finish error\n#   # description = { [@marks.isa_sink], type: 'tee_write_to_nodejs_stream', stream, on_end, }\n#   #.........................................................................................................\n#   pipeline = []\n#   pipeline.push @$watch { last, }, ( d ) ->\n#     return stream.close() if d is last\n#     stream.write d\n#   pipeline.push @$drain finish\n#   #.........................................................................................................\n#   return @pull pipeline...\n\n# #-----------------------------------------------------------------------------------------------------------\n# @node_stream_from_source = ( source ) -> TO_NODE_STREAM.source source\n\n# #-----------------------------------------------------------------------------------------------------------\n# @node_stream_from_sink = ( sink ) ->\n#   ### TAINT consider to abandon all sinks except `$drain()` and use throughs with writers instead ###\n#   R           = TO_NODE_STREAM.sink sink\n#   description = { type: 'node_stream_from_sink', sink, }\n#   return @mark_as_sink R, description\n\n\n\n\n\n"
  ]
}