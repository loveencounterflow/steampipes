{
  "version": 3,
  "file": "pull-remit.js",
  "sourceRoot": "..",
  "sources": [
    "src/pull-remit.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'STEAMPIPES/PULL-REMIT'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n{ jr }                    = CND\nassign                    = Object.assign\n#...........................................................................................................\n{ isa\n  validate\n  type_of }               = require './types'\nmisfit                    = Symbol 'misfit'\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n### Signals are special values that, when sent down the pipeline, may alter behavior: ###\n@signals = Object.freeze\n  last:             Symbol 'last'             # Used to signal last data item\n  end:              Symbol 'end'              # Request stream to terminate\n\n#-----------------------------------------------------------------------------------------------------------\n### Marks are special values that identify types, behavior of pipeline elements etc: ###\n@marks = Object.freeze\n  steampipes:       Symbol 'steampipes'       # Marks steampipes objects\n  validated:        Symbol 'validated'        # Marks a validated sink\n  isa_duct:         Symbol 'isa_duct'         # Marks a duct as such\n  isa_pusher:       Symbol 'isa_pusher'       # Marks a push source as such\n  send_last:        Symbol 'send_last'        # Marks transforms expecting a certain value before EOS\n\n#-----------------------------------------------------------------------------------------------------------\nremit_defaults = Object.freeze\n  first:    misfit\n  last:     misfit\n  between:  misfit\n  after:    misfit\n  before:   misfit\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@_get_remit_settings = ( settings, method ) ->\n  switch remit_arity = arguments.length\n    when 1 then [ method, settings, ] = [ settings, null, ]\n    when 2 then settings = { remit_defaults..., settings..., }\n    else throw new Error \"µ19358 expected 1 or 2 arguments, got #{remit_arity}\"\n  #.........................................................................................................\n  validate.function method\n  throw new Error \"µ20123 method arity #{arity} not implemented\" unless ( arity = method.length ) is 2\n  if settings?\n    validate.function settings.leapfrog if settings.leapfrog?\n    settings._surround = \\\n      ( settings.first    isnt misfit ) or \\\n      ( settings.last     isnt misfit ) or \\\n      ( settings.between  isnt misfit ) or \\\n      ( settings.after    isnt misfit ) or \\\n      ( settings.before   isnt misfit )\n  #.........................................................................................................\n  return { settings, method, }\n\n#-----------------------------------------------------------------------------------------------------------\n@remit  = @$ = ( P... ) =>\n  { settings, method, } = @_get_remit_settings P...\n  has_returned          = false\n  send                  = null\n  #.........................................................................................................\n  tsend = ( d ) =>\n    throw new Error \"µ55663 illegal to call send() after method has returned\" if has_returned\n    send d\n  tsend.end = -> send.end()\n  #.........................................................................................................\n  unless settings?\n    ### fast track without surround features ###\n    return ( d, send_ ) =>\n      send          = send_\n      has_returned  = false\n      method d, tsend\n      has_returned = true\n      return null\n  #.........................................................................................................\n  self                  = null\n  do_leapfrog           = settings.leapfrog\n  data_first            = settings.first\n  data_before           = settings.before\n  data_between          = settings.between\n  data_after            = settings.after\n  data_last             = settings.last\n  send_first            = data_first    isnt misfit\n  send_before           = data_before   isnt misfit\n  send_between          = data_between  isnt misfit\n  send_after            = data_after    isnt misfit\n  send_last             = data_last     isnt misfit\n  on_end                = null\n  is_first              = true\n  ME                    = @\n  #.........................................................................................................\n  ### slow track with surround features ###\n  R = ( d, send_ ) =>\n    # debug 'µ55641', d, d is @signals.last\n    send          = send_\n    has_returned  = false\n    #.......................................................................................................\n    if send_last and d is @signals.last\n      method data_last, tsend\n    #.......................................................................................................\n    else\n      if is_first then ( ( method data_first,   tsend ) if send_first   )\n      else             ( ( method data_between, tsend ) if send_between )\n      ( method data_before, tsend ) if send_before\n      is_first = false\n      #.....................................................................................................\n      # When leapfrogging is being called for, only call method if the jumper returns false:\n      if ( not do_leapfrog ) or ( not settings.leapfrog d ) then  method d, tsend\n      else                                                        send d\n      #.....................................................................................................\n      ( method data_after, tsend ) if send_after\n    has_returned = true\n    return null\n  #.........................................................................................................\n  R[ @marks.send_last ] = @marks.send_last if send_last\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_classify_sink = ( transform ) ->\n  @_$drain transform unless transform[ @marks.validated ]?\n  R = { type: 'sink', }\n\n#-----------------------------------------------------------------------------------------------------------\n@_classify_transform = ( transform ) ->\n  return { type: transform.type,              } if transform[ @marks.isa_duct   ]?\n  return { type: 'source', isa_pusher: true,  } if transform[ @marks.isa_pusher ]?\n  return { type: 'source',                    } if transform[ Symbol.iterator   ]?\n  return @_classify_sink transform              if ( isa.object transform ) and transform.sink?\n  switch type = type_of transform\n    when 'function'           then return { type: 'through', }\n    when 'generatorfunction'  then return { type: 'source', must_call: true, }\n  throw new Error \"µ44521 expected an iterable, a function, a generator function or a sink, got a #{type}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@_flatten_transforms = ( transforms, R = null ) ->\n  R ?= []\n  for transform in transforms\n    if transform[ @marks.isa_duct ]?\n      ### TAINT necessary to do this recursively? ###\n      R.push t for t in transform.transforms\n    else\n      R.push transform\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_new_duct = ( transforms ) ->\n  transforms  = @_flatten_transforms transforms\n  blurbs      = ( @_classify_transform transform for transform in transforms )\n  R           = { [@marks.steampipes], [@marks.isa_duct], transforms, blurbs, }\n  if transforms.length is 0\n    R.is_empty = true\n    return R\n  #.........................................................................................................\n  R.first = blurbs[ 0 ]\n  if transforms.length is 1\n    R.is_single   = true\n    R.last        = R.first\n    R.type        = R.first.type\n  else\n    R.last        = blurbs[ transforms.length - 1 ]\n    switch key = \"#{R.first.type}/#{R.last.type}\"\n      when 'source/through'   then R.type = 'source'\n      when 'through/sink'     then R.type = 'sink'\n      when 'through/through'  then R.type = 'through'\n      when 'source/sink'      then R.type = 'circuit'\n      else throw new Error \"µ44521 illegal duct configuration #{rpr key}\"\n    for idx in [ 1 ... blurbs.length - 1 ] by +1\n      unless ( b = blurbs[ idx ] ).type is 'through'\n        throw new Error \"µ44522 illegal duct configuration at transform index #{idx}: #{rpr b}\"\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_pull = ( transforms... ) ->\n  duct                  = @_new_duct transforms\n  { transforms, }       = duct\n  original_source       = null\n  throw new Error \"µ77764 source as last transform not yet supported\" if duct.last.type  is 'source'\n  throw new Error \"µ77765 sink as first transform not yet supported\"  if duct.first.type is 'sink'\n  #.........................................................................................................\n  if duct.first.type is 'source'\n    transforms[ 0 ] = transforms[ 0 ]() if duct.first.must_call\n    source          = transforms[ 0 ]\n  #.........................................................................................................\n  return duct unless duct.type is 'circuit'\n  #.........................................................................................................\n  drain                 = transforms[ transforms.length - 1 ]\n  duct.buckets          = buckets     = ( [] for _ in [ 1 ... transforms.length - 1 ] )\n  duct.buckets.push drain.sink if drain.use_sink\n  duct.has_ended        = false\n  local_sink            = null\n  local_source          = null\n  has_local_sink        = null\n  last                  = @signals.last\n  last_transform_idx    = buckets.length - if drain.use_sink then 2 else 1\n  tf_idxs               = [ 0 .. last_transform_idx ]\n  #.........................................................................................................\n  send = ( d ) =>\n    return duct.has_ended = true if d is @signals.end\n    local_sink.push d if has_local_sink\n    return null\n  send.end = => duct.has_ended = true\n  #.........................................................................................................\n  exhaust_pipeline = =>\n    loop\n      data_count    = 0\n      # for transform, idx in transforms\n      for idx in tf_idxs\n        continue if ( local_source = buckets[ idx ] ).length is 0\n        transform       = transforms[  idx + 1 ]\n        local_sink      = buckets[ idx + 1 ]\n        has_local_sink  = local_sink?\n        d               = local_source.shift()\n        data_count     += local_source.length\n        if d is last\n          transform d, send if transform[ @marks.send_last ]?\n          send last unless idx is last_transform_idx\n        else\n          transform d, send\n      break if data_count is 0\n    return null\n  #.........................................................................................................\n  duct.send             = send\n  duct.exhaust_pipeline = exhaust_pipeline\n  #.........................................................................................................\n  return duct\n\n#-----------------------------------------------------------------------------------------------------------\n@pull = ( transforms... ) ->\n  duct = @_pull transforms...\n  return duct unless duct.type is 'circuit'\n  return @_push duct if duct.transforms[ 0 ][ @marks.isa_pusher ]?\n  first_bucket = duct.buckets[ 0 ]\n  #.........................................................................................................\n  for d from duct.transforms[ 0 ]\n    break if duct.has_ended\n    # continue if d is @signals.discard\n    first_bucket.push d\n    duct.exhaust_pipeline()\n  #.........................................................................................................\n  first_bucket.push @signals.last\n  duct.exhaust_pipeline()\n  drain = transforms[ transforms.length - 1 ]\n  if ( on_end = drain.on_end )?\n    if drain.call_with_datoms then drain.on_end drain.sink else drain.on_end()\n  return duct\n\n#-----------------------------------------------------------------------------------------------------------\n@_push = ( duct ) ->\n  ### Make `duct` available from the POV of the push source: ###\n  source        = duct.transforms[ 0 ]\n  source.duct   = duct\n  ### copy buffered data (from before when `pull()` was called) to `source`: ###\n  first_bucket  = duct.buckets[ 0 ]\n  first_bucket.splice first_bucket.length, 0, source.buffer...\n  ### Process any data as may have accumulated at this point: ###\n  duct.exhaust_pipeline()\n  return null\n\n\n"
  ]
}